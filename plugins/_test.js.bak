import fs from 'fs'

const handler = async (m, { conn, command, args, usedPrefix, isOwner }) => {
  const user = global.db.data.users[m.sender] || {}
  if (user.typing === undefined) user.typing = false
  if (command === 'typing') {
    if (!isOwner) return m.reply('⚠️ Solo mi *creador* puede usar este comando.')

    if (!args[0]) {
      return m.reply(`💬 *Uso correcto:*\n\n${usedPrefix + command} on\n${usedPrefix + command} off\n\n📌 Estado actual para @${m.sender.split('@')[0]}: *${user.typing ? '✅ Activado' : '❌ Desactivado'}*`, null, {
        mentions: [m.sender]
      })
    }

    const opt = args[0].toLowerCase()
    if (opt === 'on') {
      user.typing = true
      return m.reply(`✅ El modo *escribiendo...* ha sido activado para @${m.sender.split('@')[0]}`, null, {
        mentions: [m.sender]
      })
    } else if (opt === 'off') {
      user.typing = false
      return m.reply(`❌ El modo *escribiendo...* ha sido desactivado para @${m.sender.split('@')[0]}`, null, {
        mentions: [m.sender]
      })
    } else {
      return m.reply('⚠️ Usa: on / off')
    }
  }

  if (user.typing && m.text && m.text.startsWith(usedPrefix)) {
    try {
      await conn.sendPresenceUpdate('composing', m.chat)
      await new Promise(resolve => setTimeout(resolve, 800))
    } catch (e) {}
  }
}

handler.help = ['typing on/off']
handler.tags = ['config']
handler.command = /^typing$/i
handler.owner = true

export default handler